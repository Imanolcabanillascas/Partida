/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import java.sql.PreparedStatement;
import java.sql.Connection;
import conexion.conexion;
import controlador.Ctrl_Libro;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import javax.swing.JOptionPane;
import modelo.Partida;
import controlador.Ctrl_Partida;
import java.awt.Color;
import javax.swing.JCheckBox;
import modelo.Libro;

/**
 *
 * @author LENOVO
 */
public class NewJInternalFrame_GestPartida extends javax.swing.JInternalFrame {

    private boolean primeraRecarga = true;
    private int filaSeleccionada = -1;
    private int idPartida;
    private int idTipoPartida;
    int obtenerIdLibro = 0;

    public NewJInternalFrame_GestPartida() {
        initComponents();
        this.setSize(1100, 640);
        this.setTitle("Gestionar Partidas");
        mostrarPartidas("Todos", jTable_Partida);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Partida = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btn_actualizar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        txt_buscar = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btn_recargar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_nombres = new javax.swing.JTextField();
        txt_apellido_mat = new javax.swing.JTextField();
        txt_nPartida = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_apellido_pat = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txt_folio = new javax.swing.JTextField();
        btn_buscar = new javax.swing.JButton();
        jComboBox_libro = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jComboBox_Partida = new javax.swing.JComboBox<>();
        jComboBox_filtro = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setResizable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable_Partida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Partida.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable_Partida.setGridColor(new java.awt.Color(204, 204, 204));
        jTable_Partida.setShowGrid(true);
        jScrollPane1.setViewportView(jTable_Partida);
        jTable_Partida.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 946, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 950, 370));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 51));
        jLabel2.setText("ADMINISTRAR PARTIDAS");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, -1, -1));

        btn_actualizar.setBackground(new java.awt.Color(0, 153, 51));
        btn_actualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_actualizar.setForeground(new java.awt.Color(255, 255, 255));
        btn_actualizar.setText("ACTUALIZAR");
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btn_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 370, 110, 30));

        btn_eliminar.setBackground(new java.awt.Color(255, 0, 51));
        btn_eliminar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_eliminar.setForeground(new java.awt.Color(255, 255, 255));
        btn_eliminar.setText("ELIMINAR");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btn_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 410, 110, 30));

        txt_buscar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_buscarActionPerformed(evt);
            }
        });
        getContentPane().add(txt_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 40, 310, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("A. MATERNO:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 530, -1, 20));

        btn_recargar.setBackground(new java.awt.Color(0, 153, 255));
        btn_recargar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_recargar.setForeground(new java.awt.Color(255, 255, 255));
        btn_recargar.setText("RECARGAR");
        btn_recargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_recargarActionPerformed(evt);
            }
        });
        getContentPane().add(btn_recargar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 110, 30));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("NÂ°PARTIDA:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, -1, 20));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("NOMBRES:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, -1, 20));

        txt_nombres.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_nombres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombresActionPerformed(evt);
            }
        });
        getContentPane().add(txt_nombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 520, 190, 30));

        txt_apellido_mat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_apellido_mat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_apellido_matActionPerformed(evt);
            }
        });
        getContentPane().add(txt_apellido_mat, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 520, 190, 30));

        txt_nPartida.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_nPartida.setEnabled(false);
        txt_nPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nPartidaActionPerformed(evt);
            }
        });
        getContentPane().add(txt_nPartida, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 480, 190, 30));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("TIPO:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 490, -1, 20));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("A. PATERNO:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 490, -1, 20));

        txt_apellido_pat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_apellido_pat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_apellido_patActionPerformed(evt);
            }
        });
        getContentPane().add(txt_apellido_pat, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 480, 190, 30));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("FOLIO:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 490, -1, 20));

        txt_folio.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_folio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_folioActionPerformed(evt);
            }
        });
        getContentPane().add(txt_folio, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 480, 160, 30));

        btn_buscar.setBackground(new java.awt.Color(0, 51, 255));
        btn_buscar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_buscar.setForeground(new java.awt.Color(255, 255, 255));
        btn_buscar.setText("BUSCAR");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });
        getContentPane().add(btn_buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 40, 110, 30));

        jComboBox_libro.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jComboBox_libro.setForeground(new java.awt.Color(102, 102, 102));
        jComboBox_libro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Libro" }));
        jComboBox_libro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_libroActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_libro, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 520, 160, 30));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("LIBRO:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 530, -1, 20));

        jComboBox_Partida.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jComboBox_Partida.setForeground(new java.awt.Color(102, 102, 102));
        jComboBox_Partida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Tipo" }));
        getContentPane().add(jComboBox_Partida, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 480, 160, 30));

        jComboBox_filtro.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jComboBox_filtro.setForeground(new java.awt.Color(51, 51, 51));
        jComboBox_filtro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Matrimonio", "Fallecimiento", "Nacimiento" }));
        jComboBox_filtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_filtroActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_filtro, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, 130, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/wall_Gest_Partida.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1090, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        if (!txt_nPartida.getText().isEmpty() && !txt_nombres.getText().isEmpty() && !txt_apellido_pat.getText().isEmpty() && !txt_apellido_pat.getText().isEmpty() && !txt_apellido_mat.getText().isEmpty() && !txt_folio.getText().isEmpty() && jComboBox_libro.getSelectedIndex() != -1 && jComboBox_Partida.getSelectedIndex() != -1) {
            Object[] options = {"SÃ­", "No"};
            int opcion = JOptionPane.showOptionDialog(
                    null,
                    "Â¿EstÃ¡s seguro de eliminar La Partida ?",
                    "Confirmar eliminaciÃ³n",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            if (opcion == JOptionPane.YES_OPTION) {
                Partida partida = new Partida();
                Ctrl_Partida controlPartida = new Ctrl_Partida();

                partida.setN_partida(txt_nPartida.getText().trim());
                partida.setNombres(txt_nombres.getText().trim());
                partida.setApellido_pat(txt_apellido_pat.getText().trim());
                partida.setApellido_mat(txt_apellido_mat.getText().trim());
                partida.setFolio(txt_folio.getText().trim());

                if (!controlPartida.eliminar(idPartida)) {
                    JOptionPane.showMessageDialog(null, "Partida Eliminada");
                    txt_nPartida.setText("");
                    txt_nombres.setText("");
                    txt_apellido_pat.setText("");
                    txt_apellido_mat.setText("");
                    txt_folio.setText("");
                    String opcionSeleccionada = (String) jComboBox_libro.getSelectedItem();

                    jComboBox_libro.setSelectedItem("Seleccionar Libro");
                    this.CargarTablaPartidas();
                } else {
                    JOptionPane.showMessageDialog(null, "Error al Eliminar Â¨Partida");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccionar una Partida");
        }
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void txt_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_buscarActionPerformed

    }//GEN-LAST:event_txt_buscarActionPerformed

    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed
        Partida partida = new Partida();
        Ctrl_Partida controlPartida = new Ctrl_Partida();
        String libro = jComboBox_libro.getSelectedItem().toString().trim();
        String tipo_partida = jComboBox_Partida.getSelectedItem().toString().trim();

        if (txt_nPartida.getText().equals("") || txt_nombres.getText().equals("") || txt_apellido_pat.getText().equals("") || txt_apellido_mat.getText().equals("") || txt_folio.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos");
        } else {
            try {
                partida.setN_partida(txt_nPartida.getText().trim().toUpperCase());
                partida.setNombres(txt_nombres.getText().trim().toUpperCase());
                partida.setApellido_pat(txt_apellido_pat.getText().trim().toUpperCase());
                partida.setApellido_mat(txt_apellido_mat.getText().trim().toUpperCase());
                partida.setFolio(txt_folio.getText().trim().toUpperCase());
                partida.setId_Libro(getIdLibroFromAnio(libro));
                partida.setId_tipoPartida(getIdTipoFromTipoPartida(tipo_partida));
                if (idPartida == 0) {
                    // Nueva Partida
                    if (!controlPartida.existePartidaNum(txt_nPartida.getText().trim())) {
                        if (libro.equalsIgnoreCase("Seleccionar Libro") || tipo_partida.equalsIgnoreCase("Seleccionar tipo")) {
                            JOptionPane.showMessageDialog(null, "Seleccione Libro o Tipo de Partida");
                        } else {
                            if (controlPartida.guardar(partida)) {
                                JOptionPane.showMessageDialog(null, "Registro Guardado");
                                LimpiarCampos();
                                // Resto del cÃ³digo para limpiar y actualizar la interfaz
                                // this.CargarComboLibros();
                                // this.Limpiar();
                            } else {
                                JOptionPane.showMessageDialog(null, "Error al Guardar");
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "El NÂ° de Partida ya existe en la Base de Datos");
                    }
                } else {
                    // Actualizar Partida
                    if (controlPartida.actualizar(partida, idPartida)) {
                        JOptionPane.showMessageDialog(null, "Registro Actualizado");
                        LimpiarCampos();
                        CargarTablaPartidas();
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al Actualizar");
                    }
                }
            } catch (Exception e) {
                System.out.println("Error en: " + e);
            }
        }


    }//GEN-LAST:event_btn_actualizarActionPerformed

    private void btn_recargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_recargarActionPerformed
        this.CargarTablaPartidas();
    }//GEN-LAST:event_btn_recargarActionPerformed

    private void txt_nombresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombresActionPerformed

    private void txt_apellido_matActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_apellido_matActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_apellido_matActionPerformed

    private void txt_nPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nPartidaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nPartidaActionPerformed

    private void txt_apellido_patActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_apellido_patActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_apellido_patActionPerformed

    private void txt_folioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_folioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_folioActionPerformed

    private void jComboBox_libroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_libroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_libroActionPerformed

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        String numPartidaBuscar = txt_buscar.getText().trim();
        String tipoPartidaSeleccionado = jComboBox_filtro.getSelectedItem().toString().trim();

        if (!numPartidaBuscar.isEmpty()) {
            try {
                Ctrl_Partida controlPartida = new Ctrl_Partida();
                ResultSet resultados = controlPartida.buscarPartidaPorParametros(numPartidaBuscar, tipoPartidaSeleccionado);
                DefaultTableModel modelo = new DefaultTableModel();

                // Configurar nombres de columnas
                String[] columnNames = {"ID", "NÂ°PARTIDA", "NOMBRES", "A. PATERNO", "A. MATERNO", "FOLIO", "LIBRO", "TIPO DE PARTIDA"};
                modelo.setColumnIdentifiers(columnNames);

                // Configurar el modelo de la tabla
                jTable_Partida.setModel(modelo);
                modelo.setRowCount(0); // Limpiar tabla antes de agregar nuevas filas

                while (resultados.next()) {
                    // Agregar filas a la tabla con los datos obtenidos del ResultSet
                    Object[] fila = {
                        resultados.getInt("id_Partida"),
                        resultados.getString("n_partida"),
                        resultados.getString("nombres"),
                        resultados.getString("apellido_pat"),
                        resultados.getString("apellido_mat"),
                        resultados.getString("folio"),
                        obtenerAnioPorIdLibro(resultados.getInt("id_Libro")),
                        obtenerTÃ¤rtidaPorIdTPartida(resultados.getInt("id_tipoPartida"))
                    };
                    modelo.addRow(fila);
                    txt_buscar.setText("");
                }

                // Agregar MouseListener para seleccionar una fila al hacer clic
                jTable_Partida.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        int filaSeleccionada = jTable_Partida.getSelectedRow();
                        if (filaSeleccionada != -1) {
                            // Obtener el id de la partida seleccionada
                            int idPartida = (int) jTable_Partida.getValueAt(filaSeleccionada, 0);
                            // Invocar el mÃ©todo para enviar los datos de la partida seleccionada
                            EnviardatosPartida(idPartida);
                        }
                    }
                });

            } catch (SQLException e) {
                System.err.println("Error al buscar la partida por Apellido: " + e);
            }
        } else {
            // Mensaje de error si el campo DNI estÃ¡ vacÃ­o
            JOptionPane.showMessageDialog(null, "Ingrese apellido para realizar la bÃºsqueda");
        }

    }//GEN-LAST:event_btn_buscarActionPerformed

    private void jComboBox_filtroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_filtroActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) jTable_Partida.getModel();
        String selectedItem = (String) jComboBox_filtro.getSelectedItem();
        mostrarPartidas(selectedItem, jTable_Partida);
    }//GEN-LAST:event_jComboBox_filtroActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_actualizar;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_recargar;
    private javax.swing.JComboBox<String> jComboBox_Partida;
    private javax.swing.JComboBox<String> jComboBox_filtro;
    private javax.swing.JComboBox<String> jComboBox_libro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_Partida;
    private javax.swing.JTextField txt_apellido_mat;
    private javax.swing.JTextField txt_apellido_pat;
    private javax.swing.JTextField txt_buscar;
    private javax.swing.JTextField txt_folio;
    private javax.swing.JTextField txt_nPartida;
    private javax.swing.JTextField txt_nombres;
    // End of variables declaration//GEN-END:variables

    private void CargarTablaPartidas() {
        Connection con = conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "SELECT p.id_Partida, p.n_partida, p.nombres, p.apellido_pat, p.apellido_mat, p.folio, l.anio, t.id_tipoPartida, t.tipoPartida "
                + "FROM partida p "
                + "JOIN libro l ON p.id_libro = l.id_libro "
                + "JOIN tipopartida t ON p.id_tipoPartida = t.id_tipoPartida";
        Statement st;

        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            NewJInternalFrame_GestPartida.jTable_Partida.setModel(model);
            NewJInternalFrame_GestPartida.jScrollPane1.setViewportView(NewJInternalFrame_GestPartida.jTable_Partida);

            // Agrega las columnas al modelo
            model.addColumn(" # ");
            model.addColumn("NÂ°PARTIDA");
            model.addColumn("NOMBRES");
            model.addColumn("A. PATERNO");
            model.addColumn("A. MATERNO");
            model.addColumn("FOLIO");
            model.addColumn("LIBRO");
            model.addColumn("TIPO DE PARTIDA");
            while (rs.next()) {
                Object fila[] = new Object[8];

                // ObtÃ©n los datos de la tabla partida
                fila[0] = rs.getObject("id_Partida");
                fila[1] = rs.getObject("n_partida");
                fila[2] = rs.getObject("nombres");
                fila[3] = rs.getObject("apellido_pat");
                fila[4] = rs.getObject("apellido_mat");
                fila[5] = rs.getObject("folio");
                fila[6] = rs.getObject("anio");
                fila[7] = rs.getObject("tipoPartida");

                model.addRow(fila);
            }

            // Restaura la selecciÃ³n si habÃ­a una antes de recargar la tabla
            if (!primeraRecarga && filaSeleccionada != -1 && filaSeleccionada < NewJInternalFrame_GestPartida.jTable_Partida.getRowCount()) {
                NewJInternalFrame_GestPartida.jTable_Partida.setRowSelectionInterval(filaSeleccionada, filaSeleccionada);
            }

            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        NewJInternalFrame_GestPartida.jTable_Partida.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = NewJInternalFrame_GestPartida.jTable_Partida.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1 && fila_point < model.getRowCount()) {
                    // Verifica que el Ã­ndice de la fila seleccionada estÃ© dentro de los lÃ­mites del modelo
                    idPartida = (int) model.getValueAt(fila_point, columna_point);
                    System.out.println("Clic en la fila: " + idPartida);
                    EnviardatosPartida(idPartida);
                }
            }
        });

        // DespuÃ©s de la primera recarga, establece la variable de control en false
        primeraRecarga = false;
    }

    private void EnviardatosPartida(int idPartida) {
        try {
            Connection cn = conexion.conectar();

            // Cargar combo de libros
            CargarComboLibros();

            // Cargar combo de tipo de partida
            CargarComboTipoPartida();

            // Obtener la informaciÃ³n de la partida seleccionada
            PreparedStatement psPartida = cn.prepareStatement("SELECT * FROM partida WHERE id_Partida = ?");
            psPartida.setInt(1, idPartida);
            ResultSet rsPartida = psPartida.executeQuery();

            if (rsPartida.next()) {
                // ObtÃ©n el ID del libro actualmente seleccionado en la partida
                int idLibroSeleccionado = rsPartida.getInt("id_libro");
                int idTPartidaSeleccionada = rsPartida.getInt("id_tipoPartida");
                // ObtÃ©n el tipo de partida seleccionada

                // Seleccionar el libro correspondiente en el JComboBox
                for (int i = 0; i < jComboBox_libro.getItemCount(); i++) {
                    String anioLibro = jComboBox_libro.getItemAt(i);
                    int idLibroCombo = getIdLibroFromAnio(anioLibro);

                    if (idLibroCombo == idLibroSeleccionado) {
                        jComboBox_libro.setSelectedIndex(i);
                        break;
                    }
                }

                // Seleccionar el tipo de partida correspondiente en el JComboBox_Partida
                for (int i = 0; i < jComboBox_Partida.getItemCount(); i++) {
                    String tipoPartida = jComboBox_Partida.getItemAt(i);
                    int idTipoCombo = getIdTipoFromTipoPartida(tipoPartida);

                    if (idTipoCombo == idTPartidaSeleccionada) {
                        jComboBox_Partida.setSelectedIndex(i);
                        break;
                    }
                }

                // Cargar otros campos segÃºn sea necesario
                txt_nPartida.setText(rsPartida.getString("n_partida"));
                txt_nombres.setText(rsPartida.getString("nombres"));
                txt_apellido_pat.setText(rsPartida.getString("apellido_pat"));
                txt_apellido_mat.setText(rsPartida.getString("apellido_mat"));
                txt_folio.setText(rsPartida.getString("folio"));
            }

            cn.close();
        } catch (Exception e) {
            System.err.println("Error al cargar Partida: " + e);
        }
    }

    private void CargarComboLibros() {
        Connection cn = conexion.conectar();
        String sql = "select * from libro order by cast(anio as unsigned)";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_libro.removeAllItems();
            jComboBox_libro.addItem("Seleccionar Libro");
            while (rs.next()) {
                jComboBox_libro.addItem(rs.getString("anio"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar libros");
        }
    }

    private void CargarComboTipoPartida() {
        Connection cn = conexion.conectar();
        String sql = "select * from tipopartida order by cast(tipoPartida as unsigned)";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_Partida.removeAllItems();
            jComboBox_Partida.addItem("Seleccionar Tipo");
            while (rs.next()) {
                jComboBox_Partida.addItem(rs.getString("tipoPartida"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar Partidas");
        }
    }

    private int getIdLibroFromAnio(String anio) {
        int idLibro = 0;
        String sql = "SELECT id_Libro FROM libro WHERE anio = ?";

        try ( Connection cn = conexion.conectar();  PreparedStatement pst = cn.prepareStatement(sql)) {
            pst.setString(1, anio);

            try ( ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    idLibro = rs.getInt("id_Libro");
                }
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener id Libro");
        }

        return idLibro;
    }

    private int getIdTipoFromTipoPartida(String tipoPartida) {
        int idtipoPartida = 0;
        String sql = "SELECT id_tipoPartida FROM tipopartida WHERE tipoPartida = ?";

        try ( Connection cn = conexion.conectar();  PreparedStatement pst = cn.prepareStatement(sql)) {
            pst.setString(1, tipoPartida);

            try ( ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    idtipoPartida = rs.getInt("id_tipoPartida");
                }
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener id del Tipo de Partida");
        }

        return idtipoPartida;
    }

    public String obtenerAnioPorIdLibro(int idLibro) {
        String anio = null; // Valor por defecto o manejo de error

        Connection cn = conexion.conectar();
        String sql = "SELECT anio FROM libro WHERE id_Libro = ?";

        try ( PreparedStatement pst = cn.prepareStatement(sql)) {
            pst.setInt(1, idLibro);

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                anio = rs.getString("anio");
            }

        } catch (SQLException e) {
            System.err.println("Error al obtener aÃ±o por ID de libro: " + e);
        }

        return anio;
    }

    public String obtenerTÃ¤rtidaPorIdTPartida(int idTPartida) {
        String tipoPartida = null; // Valor por defecto o manejo de error

        Connection cn = conexion.conectar();
        String sql = "SELECT tipoPartida FROM tipopartida WHERE id_tipoPartida = ?";

        try ( PreparedStatement pst = cn.prepareStatement(sql)) {
            pst.setInt(1, idTPartida);

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                tipoPartida = rs.getString("tipoPartida");
            }

        } catch (SQLException e) {
            System.err.println("Error al obtener Partida por ID de Tipo de Partida: " + e);
        }

        return tipoPartida;
    }

    public void mostrarPartidas(String selectedItem, JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0); // Limpiar tabla antes de mostrar nuevos datos

        // ConfiguraciÃ³n de los nombres de las columnas
        String[] columnNames = {"#", "NÂ° Partida", "Nombres", "A. Paterno", "A. Materno", "Folio", "AÃ±o", "Tipo de Partida"};
        model.setColumnIdentifiers(columnNames);

        String tipoPartida = null;
        if (!selectedItem.equals("Todos")) {
            if (selectedItem.equals("Fallecimiento")) {
                tipoPartida = "Fallecimiento";
            } else if (selectedItem.equals("Nacimiento")) {
                tipoPartida = "Nacimiento";
            } else if (selectedItem.equals("Matrimonio")) {
                tipoPartida = "Matrimonio";
            }
        }

        String sql = "SELECT p.id_Partida, p.n_partida, p.nombres, p.apellido_pat, p.apellido_mat, p.folio, l.anio, t.tipoPartida "
                + "FROM partida p "
                + "JOIN libro l ON p.id_libro = l.id_libro "
                + "JOIN tipopartida t ON p.id_tipoPartida = t.id_tipoPartida ";

        // Si no se selecciona un tipo especÃ­fico, mostrar todas las partidas
        if (tipoPartida != null) {
            sql += "WHERE t.tipoPartida = ?";
        }

        try ( Connection connection = conexion.conectar();  PreparedStatement statement = connection.prepareStatement(sql)) {
            if (tipoPartida != null) {
                statement.setString(1, tipoPartida);
            }

            try ( ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    Object[] row = new Object[]{
                        resultSet.getInt("id_Partida"),
                        resultSet.getString("n_partida"),
                        resultSet.getString("nombres"),
                        resultSet.getString("apellido_pat"),
                        resultSet.getString("apellido_mat"),
                        resultSet.getString("folio"),
                        resultSet.getString("anio"),
                        resultSet.getString("tipoPartida")
                    };
                    model.addRow(row);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al ejecutar la consulta", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void LimpiarCampos() {
        txt_nPartida.setText("");
        txt_nombres.setText("");
        txt_apellido_pat.setText("");
        txt_apellido_mat.setText("");
        txt_folio.setText("");
        CargarComboLibros();
        CargarComboTipoPartida();
        // Restablecer colores de fondo si es necesario
        txt_nPartida.setBackground(null);
        txt_nombres.setBackground(null);
        txt_apellido_pat.setBackground(null);
        txt_apellido_mat.setBackground(null);
        txt_folio.setBackground(null);
    }
}
